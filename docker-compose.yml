version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_system_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_system_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: auth_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Application
  app:
    build: .
    container_name: auth_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      API_PREFIX: /api
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auth_system_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DIALECT: postgres
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-docker
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Security
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Logging
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service (runs once)
  migration:
    build: .
    container_name: auth_migration
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auth_system_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DIALECT: postgres
    command: sh -c "npm run migrate && npm run seed"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    restart: "no"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: auth_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/certs:/etc/nginx/certs:ro
    depends_on:
      - app
    networks:
      - auth_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  auth_network:
    driver: bridge