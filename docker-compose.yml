# docker-compose.yml
# This file now pulls ALL relevant environment variables from the .env file
# located in the same directory.
# Ensure your .env file is NOT committed to Git if it contains actual secrets.

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME} # <-- From .env
      POSTGRES_USER: ${DB_USERNAME} # <-- From .env
      POSTGRES_PASSWORD: ${DB_PASSWORD} # <-- From .env
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-trust} # Optional: allow default or override from .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT}:${DB_PORT}" # <-- From .env
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"] # <-- From .env
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Application
  app:
    build: .
    container_name: auth_app
    restart: unless-stopped
    ports:
      - "${PORT}:${PORT}" # <-- From .env
    environment:
      NODE_ENV: ${NODE_ENV} # <-- From .env
      PORT: ${PORT} # <-- From .env
      API_PREFIX: ${API_PREFIX} # <-- From .env
      
      # Database Configuration
      DB_HOST: ${DB_HOST} # <-- From .env
      DB_PORT: ${DB_PORT} # <-- From .env
      DB_NAME: ${DB_NAME} # <-- From .env
      DB_USERNAME: ${DB_USERNAME} # <-- From .env
      DB_PASSWORD: ${DB_PASSWORD} # <-- From .env
      DB_DIALECT: ${DB_DIALECT} # <-- From .env
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET} # <-- From .env (aligned with your .env)
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN} # <-- From .env
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN} # <-- From .env
      
      # Security
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS} # <-- From .env
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS} # <-- From .env
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS} # <-- From .env
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL} # <-- From .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT}/health"] # <-- From .env
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service (runs once)
  migration:
    build: .
    container_name: auth_migration
    environment:
      NODE_ENV: ${NODE_ENV} # <-- From .env
      DB_HOST: ${DB_HOST} # <-- From .env
      DB_PORT: ${DB_PORT} # <-- From .env
      DB_NAME: ${DB_NAME} # <-- From .env
      DB_USERNAME: ${DB_USERNAME} # <-- From .env
      DB_PASSWORD: ${DB_PASSWORD} # <-- From .env
      DB_DIALECT: ${DB_DIALECT} # <-- From .env
    command: sh -c "npm run migrate && npm run seed"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    restart: "no"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: auth_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/certs:/etc/nginx/certs:ro
    depends_on:
      - app
    networks:
      - auth_network

volumes:
  postgres_data:
    driver: local
  # redis_data: # Removed as Redis service is removed
  #   driver: local

networks:
  auth_network:
    driver: bridge
