openapi: 3.0.0
info:
  title: Authentication System API
  description: API documentation for the Express-based Authentication System with Role-Based Access Control.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local Development Server
tags:
  - name: Health
    description: API Health Check
  - name: Authentication
    description: User registration, login, token refresh, and logout
  - name: User Profile
    description: Operations related to the authenticated user's profile
  - name: Admin
    description: Administrative operations on users (requires 'Admin' role)

paths:
  /health:
    get:
      summary: Health Check
      operationId: getHealthStatus
      tags:
        - Health
      responses:
        '200':
          description: Application is healthy and running.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                    example: 2025-06-19T06:44:28.000Z
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      expiresIn:
                        type: string
                        example: 1h
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          description: User already exists with this email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      summary: Log in a user
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      expiresIn:
                        type: string
                        example: 1h
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshAccessToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Tokens refreshed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      expiresIn:
                        type: string
                        example: 1h
        '400':
          description: Refresh token is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired refresh token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      summary: Log out user
      operationId: logoutUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/profile:
    get:
      summary: Get authenticated user's profile
      operationId: getUserProfile
      tags:
        - User Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User profile fetched successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update authenticated user's profile
      operationId: updateUserProfile
      tags:
        - User Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found for update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users:
    get:
      summary: Get all users (Admin only)
      operationId: getAllUsersAdmin
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: sortBy
          in: query
          description: Field to sort by (e.g., createdAt, email)
          required: false
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Users fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Users fetched successfully
                  data:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
                      currentPage:
                        type: integer
                        example: 1
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}:
    parameters:
      - name: id
        in: path
        description: UUID of the user
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a user by ID (Admin only)
      operationId: getUserByIdAdmin
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User fetched successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user by ID (Admin only)
      operationId: deleteUserAdmin
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully (No Content).
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}/status:
    put:
      summary: Update user active status (Admin only)
      operationId: updateUserStatusAdmin
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: UUID of the user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusRequest'
      responses:
        '200':
          description: User status updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User status updated to active
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 761c56b7-3b91-4e8c-8a1a-3e5e2e4e7e6e
        email:
          type: string
          format: email
          example: john.doe@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          nullable: true
          example: 2025-06-19T06:44:28.000Z
        createdAt:
          type: string
          format: date-time
          example: 2025-06-18T06:44:28.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-06-19T06:44:28.000Z
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        name:
          type: string
          enum: [Admin, Legal, PM, Sales]
          example: Sales
        description:
          type: string
          example: Sales department access
        permissions:
          type: array
          items:
            type: string
          example: [user:read, sales:read, sales:write]
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 255
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
          description: Must be at least 8 characters, contain one uppercase, one lowercase, and one digit.
          example: SecureP@ss1
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: Jane
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: Doe
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          example: SecureP@ss1
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: Janet
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: Smith
    UpdateUserStatusRequest:
      type: object
      required:
        - isActive
      properties:
        isActive:
          type: boolean
          example: false
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid credentials
        stack:
          type: string
          description: Stack trace (only in development environment)
    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: Invalid email format
              value:
                type: string
                example: invalid-email
  responses:
    UnauthorizedError:
      description: Authentication required or token is invalid/expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              message: Access token is required
    ForbiddenError:
      description: Insufficient permissions for the authenticated user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              message: Insufficient permissions
    BadRequestError:
      description: Bad request, often due to invalid input or validation errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
            example:
              success: false
              message: Validation failed
              errors:
                - field: email
                  message: Invalid email format
                  value: invalid-email
    InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
            example:
              success: false
              message: Something went wrong
              stack: "Error: Something went wrong\n    at Function.globalErrorHandler..."
